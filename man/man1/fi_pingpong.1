.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "fi_pingpong" "1" "2024\-12\-10" "Libfabric Programmer\[cq]s Manual" "#VERSION#"
.hy
.SH NAME
.PP
fi_pingpong - Quick and simple pingpong test for libfabric
.SH SYNOPSIS
.IP
.nf
\f[C]
 fi_pingpong [OPTIONS]                      start server
 fi_pingpong [OPTIONS] <server address>     connect to server
\f[R]
.fi
.SH DESCRIPTION
.PP
fi_pingpong is a pingpong test for the core feature of the libfabric
library: transmitting data between two processes.
fi_pingpong also displays aggregated statistics after each test run, and
can additionally verify data integrity upon receipt.
.PP
By default, the datagram (FI_EP_DGRAM) endpoint is used for the test,
unless otherwise specified via \f[V]-e\f[R].
.SH HOW TO RUN TESTS
.PP
Two copies of the program must be launched: first, one copy must be
launched as the server.
Second, another copy is launched with the address of the server.
.PP
As a client-server test, each have the following usage model:
.SS Start the server
.IP
.nf
\f[C]
server$ fi_pingpong
\f[R]
.fi
.SS Start the client
.IP
.nf
\f[C]
client$ fi_pingpong <server address>
\f[R]
.fi
.SH OPTIONS
.PP
The server and client must be able to communicate properly for the
fi_pingpong utility to function.
If any of the \f[V]-e\f[R], \f[V]-I\f[R], \f[V]-S\f[R], or \f[V]-p\f[R]
options are used, then they must be specified on the invocation for both
the server and the client process.
If the \f[V]-d\f[R] option is specified on the server, then the client
will select the appropriate domain if no hint is provided on the client
side.
If the \f[V]-d\f[R] option is specified on the client, then it must also
be specified on the server.
If both the server and client specify the \f[V]-d\f[R] option and the
given domains cannot communicate, then the application will fail.
.SS Control Messaging
.TP
\f[I]-B <src_port>\f[R]
The non-default source port number of the control socket.
If this is not provided then the server will bind to port 47592 by
default and the client will allow the port to be selected automatically.
.TP
\f[I]-P <dest_port>\f[R]
The non-default destination port number of the control socket.
If this is not provided then the client will connect to 47592 by
default.
The server ignores this option.
.SS Fabric Filtering
.TP
\f[I]-p <provider_name>\f[R]
The name of the underlying fabric provider (e.g., sockets, psm3, usnic,
etc.).
If a provider is not specified via the -p switch, the test will pick one
from the list of available providers (as returned by fi_getinfo(3)).
.TP
\f[I]-e <endpoint>\f[R]
The type of endpoint to be used for data messaging between the two
processes.
Supported values are dgram, rdm, and msg.
For more information on endpoint types, see fi_endpoint(3).
.TP
\f[I]-d <domain>\f[R]
The name of the specific domain to be used.
.TP
\f[I]-s <source address>\f[R]
Address to corresponding domain.
Required in multi-adapter environment.
.SS Test Options
.TP
\f[I]-I <iter>\f[R]
The number of iterations of the test will run.
.TP
\f[I]-S <msg_size>\f[R]
The specific size of the message in bytes the test will use or `all' to
run all the default sizes.
.TP
\f[I]-c\f[R]
Activate data integrity checks at the receiver (note: this will degrade
performance).
.SS Utility
.TP
\f[I]-v\f[R]
Activate output debugging (warning: highly verbose)
.TP
\f[I]-h\f[R]
Displays help output for the pingpong test.
.SH USAGE EXAMPLES
.SS A simple example
.SS Server: \f[V]fi_pingpong -p <provider_name>\f[R]
.PP
\f[V]server$ fi_pingpong -p sockets\f[R]
.SS Client: \f[V]fi_pingpong -p <provider_name> <server_addr>\f[R]
.PP
\f[V]client$ fi_pingpong -p sockets 192.168.0.123\f[R]
.SS An example with various options
.SS Server:
.PP
\f[V]server$ fi_pingpong -p usnic -I 1000 -S 1024\f[R]
.SS Client:
.PP
\f[V]client$ fi_pingpong -p usnic -I 1000 -S 1024 192.168.0.123\f[R]
.PP
Specifically, this will run a pingpong test with:
.IP \[bu] 2
usNIC provider
.IP \[bu] 2
1000 iterations
.IP \[bu] 2
1024 bytes message size
.IP \[bu] 2
server node as 192.168.0.123
.SS A longer test
.SS Server:
.PP
\f[V]server$ fi_pingpong -p usnic -I 10000 -S all\f[R]
.SS Client:
.PP
\f[V]client$ fi_pingpong -p usnic -I 10000 -S all 192.168.0.123\f[R]
.SH DEFAULTS
.PP
There is no default provider; if a provider is not specified via the
\f[V]-p\f[R] switch, the test will pick one from the list of available
providers (as returned by fi_getinfo(3)).
.PP
If no endpoint type is specified, `dgram' is used.
.PP
The default tested sizes are: 64, 256, 1024, 4096, 65536, and 1048576.
The test will only test sizes that are within the selected endpoints
maximum message size boundary.
.SH OUTPUT
.PP
Each test generates data messages which are accounted for.
Specifically, the displayed statistics at the end are :
.IP \[bu] 2
\f[I]bytes\f[R] : number of bytes per message sent
.IP \[bu] 2
\f[I]#sent\f[R] : number of messages (ping) sent from the client to the
server
.IP \[bu] 2
\f[I]#ack\f[R] : number of replies (pong) of the server received by the
client
.IP \[bu] 2
\f[I]total\f[R] : amount of memory exchanged between the processes
.IP \[bu] 2
\f[I]time\f[R] : duration of this single test
.IP \[bu] 2
\f[I]MB/sec\f[R] : throughput computed from \f[I]total\f[R] and
\f[I]time\f[R]
.IP \[bu] 2
\f[I]usec/xfer\f[R] : average time for transferring a message outbound
(ping or pong) in microseconds
.IP \[bu] 2
\f[I]Mxfers/sec\f[R] : average amount of transfers of message outbound
per second
.SH SEE ALSO
.PP
\f[V]fi_getinfo\f[R](3), \f[V]fi_endpoint\f[R](3) \f[V]fabric\f[R](7),
.SH AUTHORS
OpenFabrics.
